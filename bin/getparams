#!/usr/bin/env bash
#
# getparams
#   Parse and validate program parameters
#

readonly PROGNAME="$(basename "$0")"
readonly PROGNAME_INTL="getparams"
readonly VERSION="0.1.0"

usage() {
  cat << EOF
Usage: ${PROGNAME} [OPTION]... [-- [PARAM]...]

Parse and validate program parameters.

Options:
  -c, --combine-args
      Output options and their arguments combined into a single parameter
      separated by a '='. Applies to both short and long options. This allows
      differentiation between unspecified optional arguments (e.g. "--option")
      and empty optional arguments (e.g. "--option=''").
  -C, --no-combine-args
      Output option arguments as the next parameter following their
      corresponding option (same behaviour as the getopt(1) command). Applies
      to both short and long options. If an optional argument was not specified,
      it will be output as a '' parameter, and so there is no differentiation
      between unspecified optional arguments and empty optional arguments.
      This is the default.
  -k, --keep-order
      Output non-option parameters in the same location they were found.
  -K, --no-keep-order
      Output all non-option parameters at the end of output following
      a '--' parameter.
  -l, --longopts=LONGOPTS
      A series of recognized long option definitions delimited by
      whitespace and/or commas.
  -n, --progname=PROGNAME
      Name of the calling program for use in usage error messages.
  -o, --shortopts=SHORTOPTS
      A series of short option definitions optionally separated by
      whitespace and/or commas.
  -s, --stop-signal=SIGNAL
      Stop parsing options when a parameter represented by SIGNAL is
      encountered. This causes all remaining parameters including the
      current one to be interpreted as non-option parameters.
      Valid values are:
        'explicit'    (a '--' parameter, this is the default)
        'non-opt'     (the first non-option parameter)
        'unknown-opt' (unrecognized option or the non-option parameter)
  -h, --help
      Print this help text and exit
  -v, --version
      Print version information and exit

For more details, see ${PROGNAME_INTL}(1).
EOF
}

version() {
  echo "${PROGNAME_INTL} ${VERSION}"
}

#
# Main entry point
#
# Globals:
#   PROGNAME
#   combine_args
#   keep_order
#   longopts
#   progname
#   shortopts
#   stop_signal
#
# Return Codes:
#   0  success
#   1  usage error encountered when parsing parameters
#   2  bad usage of getparams
#
main() {
  declare -i combine_args=1
  declare -i keep_order=1
  declare    stop_signal='explicit'
  declare    progname="${PROGNAME}"
  declare -a shortopts=( c C k K l: n: o: s: h v )
  declare -a longopts=(
    'combine-args'
    'no-combine-args'
    'keep-order'
    'no-keep-order'
    'longopts:'
    'progname:'
    'shortopts:'
    'stop-signal:'
    'help'
    'version'
  )

  local params
  if ! params="$(parse "$@")"; then
    try_help
    return 2
  fi

  eval set -- "${params[@]}"

  combine_args=0
  keep_order=0
  stop_signal='explicit'
  progname=''
  shortopts=()
  longopts=()

  local opt_name opt_arg
  
  while (( $# )); do
    case "$1" in
      --) shift; break ;;
      
      -c|--combine-args) combine_args=1 ;;

      -C|--no-combine-args) combine_args=0 ;;

      -k|--keep-order) keep_order=1 ;;

      -K|--no-keep-order) keep_order=0 ;;

      -l=*|--longopts=*)
        opt_name="$(get_opt_name "$1")"

        # Squeeze any sequence of commas and whitespace into a space
        # and convert letters to lowercase.
        opt_arg="$(tr -s ', \f\n\r\t\v' ' ' <<< "${1#*=}" \
          | tr '[:upper:]' '[:lower:]')"

        local definition

        for definition in ${opt_arg}; do
          if [[ ! "${definition}" =~ ^[a-z0-9][-a-z0-9]+:{0,2}$ ]]; then
            usage_err "${PROGNAME}" "invalid long option definition " \
              "'${definition}' in argument for option '${opt_name}'"
            try_help
            return 2
          fi

          longopts+=( "${definition}" )
        done
        ;;

      -n=*|--progname=*) progname="${1#*=}" ;;

      -o=*|--shortopts=*)
        opt_name="$(get_opt_name "$1")"

        # Squeeze any sequence of commas and whitespace into a space,
        # then separate any unseparated definitions with a space.
        opt_arg="$(tr ', \f\n\r\t\v' ' ' <<< "${1#*=}" \
          | sed 's/[[:space:]]*\([A-Za-z]:\{0,2\}\)[[:space:]]*/ \1 /g')"

        local definition

        for definition in ${opt_arg}; do
          if [[ ! "${definition}" =~ ^[A-Za-z]:{0,2} ]]; then
            usage_err "${PROGNAME}" "invalid short option definition " \
              "'${definition}' in argument for option '${opt_name}'"
            try_help
            return 2
          fi

          shortopts+=( "${definition}" )
        done
        ;;

      -s=*|--stop-signal=*)
        opt_name="$(get_opt_name "$1")"
        opt_arg="${1#*=}"
        local value=""

        if [[ -n "${opt_arg}" ]]; then
          for signal in explicit non-opt unknown-opt; do
            if [[ "${signal}" =~ ^"${opt_arg}".*$ ]]; then
              value="${signal}"; break
            fi
          done
        fi
        
        if [[ -z "${value}" ]]; then
          usage_err "${PROGNAME}" "invalid argument '${opt_arg}' " \
            "for option '${opt_name}'" $'\n' "Valid arguments are: " \
            "'explicit', 'non-opt', or 'unknown-opt'"
          try_help
          return 2
        fi

        stop_signal="${value}"
        ;;

      -h|--help) usage; return 0 ;;

      -v|--version) version; return 0 ;;

      *)
        usage_err "${PROGNAME}" "unexpected parameter '$1'"
        try_help
        return 2
        ;;
    esac

    shift
  done

  parse "$@"
}

#
# Usage: get_opt_name PARAM
#
# Get a friendly name from an option parameter and print to standard output.
#
# If PARAM is a short option, outputs the option letter (e.g. 'o').
# If PARAM is a long option, outputs the option name with leading '--'
# (e.g. '--option')
# If PARAM is neither, output the original PARAM
#
get_opt_name() {
  local opt_name="${1%%=*}"

  case "${opt_name}" in
    --) echo "$1" ;;
    -) echo "$1" ;;
    --*) echo "${opt_name}" ;;
    -*) echo "${opt_name#-}" ;;
    *) echo "$1" ;;
  esac
}

#
# Usage: usage_err PROGNAME [TEXT]...
#
# Print a standard usage error message to standard error.
#
usage_err() {
  local progname="$1"; shift
  >&2 printf "%s" "${progname:-error}: " "$@" $'\n'
}

try_help() {
  >&2 echo "Try '${PROGNAME} --help' for more information."
}

#
# Usage: parse [PARAM]...
#
# Parse and validate program parameters.
#
# Globals:
#   combine_args
#   keep_order
#   longopts
#   progname
#   shortopts
#   stop_signal
#
# Return Codes:
#   0  success
#   1  usage error encountered when parsing parameters
#
parse() {
  local -a params=() nonopts=()

  while (( $# > 0 )); do
    case "$1" in
      --)
        # Stop parsing options
        
        shift
        break
        ;;

      -)
        # Non-option parameter
        
        # Non-option parameters stop option parsing
        [[ "${stop_signal}" != "explicit" ]] && break
        
        (( keep_order )) && params+=( "'-'" ) || nonopts+=( "'-'" )
        ;;

      --*)
        # Long option

        local opt_name="${1#--}"; opt_name="${opt_name%%=*}"
        local opt_arg="${1#*=}"
        local opt_def

        # Get option definition
        if [[ "${stop_signal}" == "unknown-opt" ]]; then
          # Unknown options stop option parsing
          opt_def="$(get_longopt_def "${opt_name}" 2> /dev/null)" || break
        else
          # Unknown options generate errors
          opt_def="$(get_longopt_def "${opt_name}")" || return 1
        fi

        local opt_fullname="${opt_def%%:*}"
        
        # Parse option
        case "${opt_def}" in
          *::)
            # Optional argument

            if [[ "$1" =~ ^"--${opt_name}=".*$ ]]; then
              # Specified optional argument
              (( combine_args )) \
                && params+=( "--${opt_fullname}=$(quote "${opt_arg}")" ) \
                || params+=( "--${opt_fullname}" "$(quote "${opt_arg}")" )
            else
              # Unspecified optional argument
              (( combine_args )) \
                && params+=( "--${opt_fullname}" ) \
                || params+=( "--${opt_fullname}" "''" )
            fi
            ;;

          *:)
            # Required argument

            if [[ "$1" =~ ^"--${opt_name}=".*$ ]]; then
              # Specified required argument in current parameter
              (( combine_args )) \
                && params+=( "--${opt_fullname}=$(quote "${opt_arg}")" ) \
                || params+=( "--${opt_fullname}" "$(quote "${opt_arg}")" )
            elif (( $# > 1 )); then
              # Specified required argument in next parameter
              shift
              opt_arg="$1"

              (( combine_args )) \
                && params+=( "--${opt_fullname}=$(quote "${opt_arg}")" ) \
                || params+=( "--${opt_fullname}" "$(quote "${opt_arg}")" )
            else
              # Unspecified required argument
              usage_err "${progname}" \
                "option '--${opt_fullname}' requires an argument"
              return 1
            fi
            ;;

          *)
            # No argument

            if [[ "$1" =~ ^"--${opt_name}=".*$ ]]; then
              # Specified unwanted argument
              usage_err "${progname}" \
                "option '--${opt_fullname}' doesn't accept an argument"
              return 1
            fi

            params+=( "--${opt_fullname}" )
            ;;
        esac
        ;;
        
      -*)
        # Short option group

        local group_opt_chars="${1#-}"
        local opt_count=${#group_opt_chars}

        # Store parsed parameters here until the entire short option group
        # is parsed. This way, if STOP_SIGNAL is set to 'unknown' and an
        # unrecognized option is encountered, then the entire short option
        # group can be interpreted as a non-option parameter.
        local group_params=()

        local i opt_char opt_def opt_arg

        for (( i=0; i < opt_count; i++ )); do
          opt_char="${group_opt_chars:i:1}"
          
          # Get option definition
          if [[ "${stop_signal}" == "unknown-opt" ]]; then
            # Unknown options stop option parsing
            opt_def="$(get_shortopt_def "${opt_char}" 2> /dev/null)" || break 2
          else
            # Unknown options generate errors
            opt_def="$(get_shortopt_def "${opt_char}")" || return 1
          fi

          # Parse option
          case "${opt_def}" in
            *::)
              # Optional argument
              
              if (( i < opt_count - 1 )); then
                # Specified optional argument
                opt_arg="${group_opt_chars:i+1}"

                (( combine_args )) \
                  && group_params+=( "-${opt_char}=$(quote "${opt_arg}")" ) \
                  || group_params+=( "-${opt_char}" "$(quote "${opt_arg}")" )
                break
              else
                # Unspecified optional argument
                (( combine_args )) \
                  && group_params+=( "-${opt_char}" ) \
                  || group_params+=( "-${opt_char}" "''" )
              fi
              ;;

            *:)
              # Required argument
              
              if (( i < opt_count - 1 )); then
                # Specified required argument in current parameter
                opt_arg="${group_opt_chars:i+1}"
              elif (( $# > 1 )); then
                # Specified required argument in next parameter
                shift
                opt_arg="$1"
              else
                # Unspecified required argument
                usage_err "${progname}" \
                  "option '${opt_char}' requires an argument"
                return 1
              fi

              (( combine_args )) \
                && group_params+=( "-${opt_char}=$(quote "${opt_arg}")" ) \
                || group_params+=( "-${opt_char}" "$(quote "${opt_arg}")" )
              break
              ;;

            *)
              # No argument
              
              group_params+=( "-${opt_char}" )
              ;;
          esac
        done

        params+=( "${group_params[@]}" )
        ;;

      *)
        # Non-option parameter
        
        # Non-option parameters stop option parsing
        [[ "${stop_signal}" != "explicit" ]] && break
         
        (( keep_order )) \
          && params+=( "$(quote "$1")" ) \
          || nonopts+=( "$(quote "$1")" )
        ;;
    esac

    shift
  done

  # Any remaining parameters are non-option parameters
  while (( $# > 0 )); do
    nonopts+=( "$(quote "$1")" )
    shift
  done

  echo "${params[*]} -- ${nonopts[*]}"
}

#
# Usage: get_shortopt_def OPTCHAR
#
# Search short option definitions for an option character
# and output the full definition (e.g. 'o::').
#
# Globals:
#   progname
#   shortopts
#
# Arguments:
#   OPTCHAR
#     The option character to search for.
#     Must not contain the leading '-' (e.g. 'o').
#
# Return Codes:
#   0  success
#   1  OPTCHAR not found
#
get_shortopt_def() {
  local opt_char="$1"

  for opt_def in "${shortopts[@]}"; do
    if [[ "${opt_def}" =~ ^"${opt_char}":{0,2}$ ]]; then
      echo "${opt_def}"
      return 0
    fi
  done

  usage_err "${progname}" "unrecognized option '${opt_char}'"
  return 1
}

#
# Usage: get_longopt_def OPTNAME
#
# Search long option definitions for a long option name
# and output the full definition (e.g. 'option::').
#
# Globals:
#   longopts
#   progname
#
# Arguments:
#   OPTNAME
#     The long option name to search for.
#     Must not contain the leading '--' (e.g. 'option').
#
# Return Codes:
#   0  success
#   1  OPTNAME not found or is an ambiguous abbreviation.
#
get_longopt_def() {
  local opt_name="$1" matched_def
  local -a matches=()

  for opt_def in "${longopts[@]}"; do
    if [[ "${opt_def}" =~ ^"${opt_name}":{0,2}$ ]]; then
      # Exact match
      echo "${opt_def}"
      return 0
    elif [[ "${opt_def}" =~ ^"${opt_name}"[-a-z0-9]+:{0,2}$ ]]; then
      # Abbreviation
      matched_def="${opt_def}"
      matches+=( "--${opt_def%%:*}" )
    fi
  done

  if (( ${#matches[@]} < 1 )); then
    usage_err "${progname}" "unrecognized option '--${opt_name}'"
    return 1
  elif (( ${#matches[@]} > 1 )); then
    usage_err "${progname}" "ambiguous option '--${opt_name}': " \
      "possibilities: ${matches[*]}"
    return 1
  fi

  echo "${matched_def}"
}

#
# Usage: quote PARAM
#
# Wrap PARAM in single quotes and escape any embedded single quotes.
#
quote() {
  # The ${var//search/replace} parameter expansion in bash v3 interprets
  # special characters such as backslashes in the replacement text as literals.
  # Use sed instead for a consistent behavior across bash versions.
  # shellcheck disable=SC2001
  echo "'$(sed "s/'/'\\\''/g" <<< "$1")'"
}


main "$@"


# vim: expandtab:ts=2:sw=0
